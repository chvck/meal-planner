/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var proto_model_model_pb = require('../../proto/model/model_pb.js');
goog.object.extend(proto, proto_model_model_pb);
goog.exportSymbol('proto.chvck.mealplanner.service.AllRecipesRequest', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.AllRecipesResponse', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.CreateRecipeRequest', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.CreateRecipeResponse', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.CreateUserRequest', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.CreateUserResponse', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.DeleteRecipeRequest', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.DeleteRecipeResponse', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.LoginUserRequest', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.LoginUserResponse', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.RecipeByIDRequest', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.RecipeByIDResponse', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.UpdateRecipeRequest', null, global);
goog.exportSymbol('proto.chvck.mealplanner.service.UpdateRecipeResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.AllRecipesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.AllRecipesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.AllRecipesRequest.displayName = 'proto.chvck.mealplanner.service.AllRecipesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.AllRecipesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.chvck.mealplanner.service.AllRecipesResponse.repeatedFields_, null);
};
goog.inherits(proto.chvck.mealplanner.service.AllRecipesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.AllRecipesResponse.displayName = 'proto.chvck.mealplanner.service.AllRecipesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.RecipeByIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.RecipeByIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.RecipeByIDRequest.displayName = 'proto.chvck.mealplanner.service.RecipeByIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.RecipeByIDResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.RecipeByIDResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.RecipeByIDResponse.displayName = 'proto.chvck.mealplanner.service.RecipeByIDResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.CreateRecipeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.CreateRecipeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.CreateRecipeRequest.displayName = 'proto.chvck.mealplanner.service.CreateRecipeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.CreateRecipeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.CreateRecipeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.CreateRecipeResponse.displayName = 'proto.chvck.mealplanner.service.CreateRecipeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.UpdateRecipeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.UpdateRecipeRequest.displayName = 'proto.chvck.mealplanner.service.UpdateRecipeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.UpdateRecipeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.UpdateRecipeResponse.displayName = 'proto.chvck.mealplanner.service.UpdateRecipeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.DeleteRecipeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.DeleteRecipeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.DeleteRecipeRequest.displayName = 'proto.chvck.mealplanner.service.DeleteRecipeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.DeleteRecipeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.DeleteRecipeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.DeleteRecipeResponse.displayName = 'proto.chvck.mealplanner.service.DeleteRecipeResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.LoginUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.LoginUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.LoginUserRequest.displayName = 'proto.chvck.mealplanner.service.LoginUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.LoginUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.LoginUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.LoginUserResponse.displayName = 'proto.chvck.mealplanner.service.LoginUserResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.CreateUserRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.CreateUserRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.CreateUserRequest.displayName = 'proto.chvck.mealplanner.service.CreateUserRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.chvck.mealplanner.service.CreateUserResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.chvck.mealplanner.service.CreateUserResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.chvck.mealplanner.service.CreateUserResponse.displayName = 'proto.chvck.mealplanner.service.CreateUserResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.AllRecipesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.AllRecipesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.AllRecipesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.AllRecipesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    offset: (f = jspb.Message.getFieldWithDefault(msg, 1, 0)) == null ? undefined : f,
    limit: (f = jspb.Message.getFieldWithDefault(msg, 2, 0)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.AllRecipesRequest}
 */
proto.chvck.mealplanner.service.AllRecipesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.AllRecipesRequest;
  return proto.chvck.mealplanner.service.AllRecipesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.AllRecipesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.AllRecipesRequest}
 */
proto.chvck.mealplanner.service.AllRecipesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.AllRecipesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.AllRecipesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.AllRecipesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.AllRecipesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 offset = 1;
 * @return {number}
 */
proto.chvck.mealplanner.service.AllRecipesRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.chvck.mealplanner.service.AllRecipesRequest.prototype.setOffset = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.chvck.mealplanner.service.AllRecipesRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.chvck.mealplanner.service.AllRecipesRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.chvck.mealplanner.service.AllRecipesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.AllRecipesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.AllRecipesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.AllRecipesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.AllRecipesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipesList: jspb.Message.toObjectList(msg.getRecipesList(),
    proto_model_model_pb.Recipe.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.AllRecipesResponse}
 */
proto.chvck.mealplanner.service.AllRecipesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.AllRecipesResponse;
  return proto.chvck.mealplanner.service.AllRecipesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.AllRecipesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.AllRecipesResponse}
 */
proto.chvck.mealplanner.service.AllRecipesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_model_model_pb.Recipe;
      reader.readMessage(value,proto_model_model_pb.Recipe.deserializeBinaryFromReader);
      msg.addRecipes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.AllRecipesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.AllRecipesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.AllRecipesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.AllRecipesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto_model_model_pb.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * repeated chvck.mealplanner.model.Recipe recipes = 1;
 * @return {!Array<!proto.chvck.mealplanner.model.Recipe>}
 */
proto.chvck.mealplanner.service.AllRecipesResponse.prototype.getRecipesList = function() {
  return /** @type{!Array<!proto.chvck.mealplanner.model.Recipe>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto_model_model_pb.Recipe, 1));
};


/** @param {!Array<!proto.chvck.mealplanner.model.Recipe>} value */
proto.chvck.mealplanner.service.AllRecipesResponse.prototype.setRecipesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.chvck.mealplanner.model.Recipe=} opt_value
 * @param {number=} opt_index
 * @return {!proto.chvck.mealplanner.model.Recipe}
 */
proto.chvck.mealplanner.service.AllRecipesResponse.prototype.addRecipes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.chvck.mealplanner.model.Recipe, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.chvck.mealplanner.service.AllRecipesResponse.prototype.clearRecipesList = function() {
  this.setRecipesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.RecipeByIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.RecipeByIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.RecipeByIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.RecipeByIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipeId: (f = jspb.Message.getFieldWithDefault(msg, 1, 0)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.RecipeByIDRequest}
 */
proto.chvck.mealplanner.service.RecipeByIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.RecipeByIDRequest;
  return proto.chvck.mealplanner.service.RecipeByIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.RecipeByIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.RecipeByIDRequest}
 */
proto.chvck.mealplanner.service.RecipeByIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecipeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.RecipeByIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.RecipeByIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.RecipeByIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.RecipeByIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipeId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 recipe_id = 1;
 * @return {number}
 */
proto.chvck.mealplanner.service.RecipeByIDRequest.prototype.getRecipeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.chvck.mealplanner.service.RecipeByIDRequest.prototype.setRecipeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.RecipeByIDResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.RecipeByIDResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.RecipeByIDResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.RecipeByIDResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipe: (f = msg.getRecipe()) && proto_model_model_pb.Recipe.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.RecipeByIDResponse}
 */
proto.chvck.mealplanner.service.RecipeByIDResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.RecipeByIDResponse;
  return proto.chvck.mealplanner.service.RecipeByIDResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.RecipeByIDResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.RecipeByIDResponse}
 */
proto.chvck.mealplanner.service.RecipeByIDResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_model_model_pb.Recipe;
      reader.readMessage(value,proto_model_model_pb.Recipe.deserializeBinaryFromReader);
      msg.setRecipe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.RecipeByIDResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.RecipeByIDResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.RecipeByIDResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.RecipeByIDResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipe();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_model_model_pb.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * optional chvck.mealplanner.model.Recipe recipe = 1;
 * @return {?proto.chvck.mealplanner.model.Recipe}
 */
proto.chvck.mealplanner.service.RecipeByIDResponse.prototype.getRecipe = function() {
  return /** @type{?proto.chvck.mealplanner.model.Recipe} */ (
    jspb.Message.getWrapperField(this, proto_model_model_pb.Recipe, 1));
};


/** @param {?proto.chvck.mealplanner.model.Recipe|undefined} value */
proto.chvck.mealplanner.service.RecipeByIDResponse.prototype.setRecipe = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chvck.mealplanner.service.RecipeByIDResponse.prototype.clearRecipe = function() {
  this.setRecipe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chvck.mealplanner.service.RecipeByIDResponse.prototype.hasRecipe = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.CreateRecipeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.CreateRecipeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.CreateRecipeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.CreateRecipeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipe: (f = msg.getRecipe()) && proto_model_model_pb.Recipe.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.CreateRecipeRequest}
 */
proto.chvck.mealplanner.service.CreateRecipeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.CreateRecipeRequest;
  return proto.chvck.mealplanner.service.CreateRecipeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.CreateRecipeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.CreateRecipeRequest}
 */
proto.chvck.mealplanner.service.CreateRecipeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_model_model_pb.Recipe;
      reader.readMessage(value,proto_model_model_pb.Recipe.deserializeBinaryFromReader);
      msg.setRecipe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.CreateRecipeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.CreateRecipeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.CreateRecipeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.CreateRecipeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipe();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_model_model_pb.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * optional chvck.mealplanner.model.Recipe recipe = 1;
 * @return {?proto.chvck.mealplanner.model.Recipe}
 */
proto.chvck.mealplanner.service.CreateRecipeRequest.prototype.getRecipe = function() {
  return /** @type{?proto.chvck.mealplanner.model.Recipe} */ (
    jspb.Message.getWrapperField(this, proto_model_model_pb.Recipe, 1));
};


/** @param {?proto.chvck.mealplanner.model.Recipe|undefined} value */
proto.chvck.mealplanner.service.CreateRecipeRequest.prototype.setRecipe = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chvck.mealplanner.service.CreateRecipeRequest.prototype.clearRecipe = function() {
  this.setRecipe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chvck.mealplanner.service.CreateRecipeRequest.prototype.hasRecipe = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.CreateRecipeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.CreateRecipeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.CreateRecipeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.CreateRecipeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipe: (f = msg.getRecipe()) && proto_model_model_pb.Recipe.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.CreateRecipeResponse}
 */
proto.chvck.mealplanner.service.CreateRecipeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.CreateRecipeResponse;
  return proto.chvck.mealplanner.service.CreateRecipeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.CreateRecipeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.CreateRecipeResponse}
 */
proto.chvck.mealplanner.service.CreateRecipeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_model_model_pb.Recipe;
      reader.readMessage(value,proto_model_model_pb.Recipe.deserializeBinaryFromReader);
      msg.setRecipe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.CreateRecipeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.CreateRecipeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.CreateRecipeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.CreateRecipeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipe();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_model_model_pb.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * optional chvck.mealplanner.model.Recipe recipe = 1;
 * @return {?proto.chvck.mealplanner.model.Recipe}
 */
proto.chvck.mealplanner.service.CreateRecipeResponse.prototype.getRecipe = function() {
  return /** @type{?proto.chvck.mealplanner.model.Recipe} */ (
    jspb.Message.getWrapperField(this, proto_model_model_pb.Recipe, 1));
};


/** @param {?proto.chvck.mealplanner.model.Recipe|undefined} value */
proto.chvck.mealplanner.service.CreateRecipeResponse.prototype.setRecipe = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chvck.mealplanner.service.CreateRecipeResponse.prototype.clearRecipe = function() {
  this.setRecipe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chvck.mealplanner.service.CreateRecipeResponse.prototype.hasRecipe = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.UpdateRecipeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.UpdateRecipeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipe: (f = msg.getRecipe()) && proto_model_model_pb.Recipe.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.UpdateRecipeRequest}
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.UpdateRecipeRequest;
  return proto.chvck.mealplanner.service.UpdateRecipeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.UpdateRecipeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.UpdateRecipeRequest}
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_model_model_pb.Recipe;
      reader.readMessage(value,proto_model_model_pb.Recipe.deserializeBinaryFromReader);
      msg.setRecipe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.UpdateRecipeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.UpdateRecipeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipe();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_model_model_pb.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * optional chvck.mealplanner.model.Recipe recipe = 1;
 * @return {?proto.chvck.mealplanner.model.Recipe}
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest.prototype.getRecipe = function() {
  return /** @type{?proto.chvck.mealplanner.model.Recipe} */ (
    jspb.Message.getWrapperField(this, proto_model_model_pb.Recipe, 1));
};


/** @param {?proto.chvck.mealplanner.model.Recipe|undefined} value */
proto.chvck.mealplanner.service.UpdateRecipeRequest.prototype.setRecipe = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest.prototype.clearRecipe = function() {
  this.setRecipe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chvck.mealplanner.service.UpdateRecipeRequest.prototype.hasRecipe = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.UpdateRecipeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.UpdateRecipeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipe: (f = msg.getRecipe()) && proto_model_model_pb.Recipe.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.UpdateRecipeResponse}
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.UpdateRecipeResponse;
  return proto.chvck.mealplanner.service.UpdateRecipeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.UpdateRecipeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.UpdateRecipeResponse}
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_model_model_pb.Recipe;
      reader.readMessage(value,proto_model_model_pb.Recipe.deserializeBinaryFromReader);
      msg.setRecipe(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.UpdateRecipeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.UpdateRecipeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipe();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_model_model_pb.Recipe.serializeBinaryToWriter
    );
  }
};


/**
 * optional chvck.mealplanner.model.Recipe recipe = 1;
 * @return {?proto.chvck.mealplanner.model.Recipe}
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse.prototype.getRecipe = function() {
  return /** @type{?proto.chvck.mealplanner.model.Recipe} */ (
    jspb.Message.getWrapperField(this, proto_model_model_pb.Recipe, 1));
};


/** @param {?proto.chvck.mealplanner.model.Recipe|undefined} value */
proto.chvck.mealplanner.service.UpdateRecipeResponse.prototype.setRecipe = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse.prototype.clearRecipe = function() {
  this.setRecipe(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chvck.mealplanner.service.UpdateRecipeResponse.prototype.hasRecipe = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.DeleteRecipeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.DeleteRecipeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.DeleteRecipeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.DeleteRecipeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    recipeId: (f = jspb.Message.getFieldWithDefault(msg, 1, 0)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.DeleteRecipeRequest}
 */
proto.chvck.mealplanner.service.DeleteRecipeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.DeleteRecipeRequest;
  return proto.chvck.mealplanner.service.DeleteRecipeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.DeleteRecipeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.DeleteRecipeRequest}
 */
proto.chvck.mealplanner.service.DeleteRecipeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecipeId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.DeleteRecipeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.DeleteRecipeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.DeleteRecipeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.DeleteRecipeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecipeId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 recipe_id = 1;
 * @return {number}
 */
proto.chvck.mealplanner.service.DeleteRecipeRequest.prototype.getRecipeId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.chvck.mealplanner.service.DeleteRecipeRequest.prototype.setRecipeId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.DeleteRecipeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.DeleteRecipeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.DeleteRecipeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.DeleteRecipeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.DeleteRecipeResponse}
 */
proto.chvck.mealplanner.service.DeleteRecipeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.DeleteRecipeResponse;
  return proto.chvck.mealplanner.service.DeleteRecipeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.DeleteRecipeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.DeleteRecipeResponse}
 */
proto.chvck.mealplanner.service.DeleteRecipeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.DeleteRecipeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.DeleteRecipeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.DeleteRecipeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.DeleteRecipeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.LoginUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.LoginUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.LoginUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.LoginUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: (f = jspb.Message.getFieldWithDefault(msg, 1, "")) == null ? undefined : f,
    password: (f = jspb.Message.getFieldWithDefault(msg, 2, "")) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.LoginUserRequest}
 */
proto.chvck.mealplanner.service.LoginUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.LoginUserRequest;
  return proto.chvck.mealplanner.service.LoginUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.LoginUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.LoginUserRequest}
 */
proto.chvck.mealplanner.service.LoginUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.LoginUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.LoginUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.LoginUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.LoginUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.chvck.mealplanner.service.LoginUserRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chvck.mealplanner.service.LoginUserRequest.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.chvck.mealplanner.service.LoginUserRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chvck.mealplanner.service.LoginUserRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.LoginUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.LoginUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.LoginUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.LoginUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = jspb.Message.getFieldWithDefault(msg, 1, "")) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.LoginUserResponse}
 */
proto.chvck.mealplanner.service.LoginUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.LoginUserResponse;
  return proto.chvck.mealplanner.service.LoginUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.LoginUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.LoginUserResponse}
 */
proto.chvck.mealplanner.service.LoginUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.LoginUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.LoginUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.LoginUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.LoginUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.chvck.mealplanner.service.LoginUserResponse.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.chvck.mealplanner.service.LoginUserResponse.prototype.setToken = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.CreateUserRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.CreateUserRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.CreateUserRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.CreateUserRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto_model_model_pb.User.toObject(includeInstance, f),
    password: (f = jspb.Message.getFieldWithDefault(msg, 2, "")) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.CreateUserRequest}
 */
proto.chvck.mealplanner.service.CreateUserRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.CreateUserRequest;
  return proto.chvck.mealplanner.service.CreateUserRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.CreateUserRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.CreateUserRequest}
 */
proto.chvck.mealplanner.service.CreateUserRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_model_model_pb.User;
      reader.readMessage(value,proto_model_model_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.CreateUserRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.CreateUserRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.CreateUserRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.CreateUserRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_model_model_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional chvck.mealplanner.model.User user = 1;
 * @return {?proto.chvck.mealplanner.model.User}
 */
proto.chvck.mealplanner.service.CreateUserRequest.prototype.getUser = function() {
  return /** @type{?proto.chvck.mealplanner.model.User} */ (
    jspb.Message.getWrapperField(this, proto_model_model_pb.User, 1));
};


/** @param {?proto.chvck.mealplanner.model.User|undefined} value */
proto.chvck.mealplanner.service.CreateUserRequest.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chvck.mealplanner.service.CreateUserRequest.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chvck.mealplanner.service.CreateUserRequest.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.chvck.mealplanner.service.CreateUserRequest.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.chvck.mealplanner.service.CreateUserRequest.prototype.setPassword = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.chvck.mealplanner.service.CreateUserResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.chvck.mealplanner.service.CreateUserResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.chvck.mealplanner.service.CreateUserResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.CreateUserResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto_model_model_pb.User.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.chvck.mealplanner.service.CreateUserResponse}
 */
proto.chvck.mealplanner.service.CreateUserResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.chvck.mealplanner.service.CreateUserResponse;
  return proto.chvck.mealplanner.service.CreateUserResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.chvck.mealplanner.service.CreateUserResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.chvck.mealplanner.service.CreateUserResponse}
 */
proto.chvck.mealplanner.service.CreateUserResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto_model_model_pb.User;
      reader.readMessage(value,proto_model_model_pb.User.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.chvck.mealplanner.service.CreateUserResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.chvck.mealplanner.service.CreateUserResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.chvck.mealplanner.service.CreateUserResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.chvck.mealplanner.service.CreateUserResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto_model_model_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * optional chvck.mealplanner.model.User user = 1;
 * @return {?proto.chvck.mealplanner.model.User}
 */
proto.chvck.mealplanner.service.CreateUserResponse.prototype.getUser = function() {
  return /** @type{?proto.chvck.mealplanner.model.User} */ (
    jspb.Message.getWrapperField(this, proto_model_model_pb.User, 1));
};


/** @param {?proto.chvck.mealplanner.model.User|undefined} value */
proto.chvck.mealplanner.service.CreateUserResponse.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.chvck.mealplanner.service.CreateUserResponse.prototype.clearUser = function() {
  this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.chvck.mealplanner.service.CreateUserResponse.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.chvck.mealplanner.service);
